package main

import (
	"fmt"
	"regexp"
)

func main() {

	/*
		[] 범위
		+ 1개 이상
		* 0개 이상
		? 0개 또는 1개
		. 딱 1개
		\\ 사용하는 문자 그대로
		^ 제외
	*/

	/*
		[0-9] 숫자 아무거나
		[a-zA-Z0-9] 영어나 숫자 아무거나
		[^a-z]소문자 말고
		[가-힣] 한글 아무거나
	*/

	matched, _ := regexp.MatchString("H", "Hello World")
	fmt.Println(matched)

	/*
		김[가-힣]+ 김씨 찾기
		^[_a-z0-9+-.]+@[a-z0-9-]+(\\.[a-z0-9-]+)*(\\.[a-z]{2,4})$ 이메일
		^[_a-z0-9+-.]+@ ^ 문자열의 맨앞에
		_나 영어나 숫자나 - 등등이 한글자라도 . 있으면 + 매치

		[a-z0-9-]+ 도메인
		\\. 도메인. 의 .
		[a-z0-9-]+)*(\\.[a-z]{2,4})$ 소문자만 사용할 수 있고 문자열의 맨 뒤에
		여기서 {2,4}처럼 중괄호에 숫자를 지정하여 최소 개수, 최대 개수를 표현할 수 있습니다.
		따라서 영문 소문자 2개에서 4개까지 입니다

		/^\d{3}-\d{3,4}-\d{4}$/ 핸드폰
		숫자 3개로 시작 - 숫자 3, 4개 - 숫자 4개

		/^\d{2,3}-\d{3,4}-\d{4}$/ 일반전화

		02, 031 등 숫자 3개 - 숫자 3, 4개 - 숫자 4개

		/^[0-9]+$/ 숫자만

		/^[가-힣]+$/ 한글만
		/^[가-힣\s]+$/ 한글, 띄어쓰기만

	*/

	re1, _ := regexp.Compile("/^[가-힣]+/")
	s1 := re1.Split("abc한글한글", -1) // 문자열을 정규표현식에 맞게 쪼갠 후 처리할 수 있음..
	fmt.Println(s1)
}
